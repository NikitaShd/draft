#include <cassert>
#include <iostream>
#include <map>
#include <string>
#include <vector>

using namespace std;

enum class QueryType {
    NewBus,
    BusesForStop,
    StopsForBus,
    AllBuses,
};

struct Query {
    QueryType type;
    string bus;
    string stop;
    vector<string> stops;
};

istream& operator>>(istream& is, Query& q) {

    string type;
    is >> type;

    if ("ALL_BUSES" == type) {
        q.type = QueryType::AllBuses;
    } else if ("BUSES_FOR_STOP" == type) {
        q.type = QueryType::BusesForStop;
    } else if ("STOPS_FOR_BUS" == type) {
        q.type = QueryType::StopsForBus;
    } else if ("NEW_BUS" == type) {
        q.type = QueryType::NewBus;
    }

    string bus;
    string stop;

    switch (q.type) {
    case QueryType::NewBus:
            is >> bus;
            q.bus = bus;
            int count;
            is >> count;
            q.stops.clear();
            for (int i = 0; i < count; i++) {
                is >> stop;
                q.stops.push_back(stop);
            }
        break;
    case QueryType::BusesForStop:
            is >> stop;
            q.stop = stop;
        break;
    case QueryType::StopsForBus:
            is >> bus;
            q.bus = bus;
        break;
    }

    return is;
}

struct BusesForStopResponse {
    bool isValid;
    vector<string> bus;
};

ostream& operator<<(ostream& os, const BusesForStopResponse& r) {
    // Реализуйте эту функцию
    return os;
}

struct StopsForBusResponse {
    // Наполните полями эту структуру
};

ostream& operator<<(ostream& os, const StopsForBusResponse& r) {
    // Реализуйте эту функцию
    return os;
}

struct AllBusesResponse {
    // Наполните полями эту структуру
};

ostream& operator<<(ostream& os, const AllBusesResponse& r) {
    // Реализуйте эту функцию
    return os;
}

class BusManager {
public:
    void AddBus(const string& bus, const vector<string>& stops) {
        busContainer_[bus] = stops;
    }

    BusesForStopResponse GetBusesForStop(const string& stop) const {
        // Реализуйте этот метод
        return {};
    }

    StopsForBusResponse GetStopsForBus(const string& bus) const {
        // Реализуйте этот метод
        return {};
    }

    AllBusesResponse GetAllBuses() const {
        // Реализуйте этот метод
        return {};
    }
private:
    map<string, vector<string>> busContainer_;
};

// Реализуйте функции и классы, объявленные выше, чтобы эта функция main
// решала задачу "Автобусные остановки"

int main() {
    int query_count;
    Query q;

    cin >> query_count;

    BusManager bm;
    for (int i = 0; i < query_count; ++i) {
        cin >> q;
        switch (q.type) {
        case QueryType::NewBus:
            bm.AddBus(q.bus, q.stops);
            break;
        case QueryType::BusesForStop:
            cout << bm.GetBusesForStop(q.stop) << endl;
            break;
        case QueryType::StopsForBus:
         //   cout << bm.GetStopsForBus(q.bus) << endl;
            break;
        case QueryType::AllBuses:
         //  cout << bm.GetAllBuses() << endl;
            break;
        }
    }
}
